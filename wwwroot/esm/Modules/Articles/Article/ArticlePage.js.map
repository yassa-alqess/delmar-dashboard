{
  "version": 3,
  "sources": ["../../../../../Modules/Articles/Article/ArticlePage.ts", "../../../../../Modules/Articles/Article/ArticleGrid.ts", "../../../../../Modules/Articles/Article/ArticleDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { ArticleGrid } from './ArticleGrid';\r\n\r\nexport default function pageInit() {\n    initFullHeightGridPage(new ArticleGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid, QuickSearchField } from '@serenity-is/corelib';\r\nimport { ArticleColumns, ArticleRow, ArticleService } from '@/ServerTypes/Articles';\r\nimport { ArticleDialog } from './ArticleDialog';\r\nimport { text, first, Authorization, indexOf } from '@serenity-is/corelib/q';\r\nimport { PermissionKeys, UserRow, UserService } from '../../Administration';\r\n\r\n@Decorators.registerClass('Dashboard.Articles.ArticleGrid')\nexport class ArticleGrid extends EntityGrid<ArticleRow, any> {\n    protected getColumnsKey() { return ArticleColumns.columnsKey; }\n    protected getDialogType() { return ArticleDialog; }\n    protected getRowDefinition() { return ArticleRow; }\n    protected getService() { return ArticleService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n        //  filter by auther id and if it's admin then pass null to equality filter so it returns all articles.\n        /*const \u0650AutherId = UserRow.Fields.UserId;\n        const filterParam = AutherId == 1 ? null : AutherId;\n*/        //this.setEquality(UserRow.Fields.UserId,fi);\n    }\n    protected getQuickSearchFields(): QuickSearchField[] {\n        const fld = ArticleRow.Fields;\n        const txt = (s) =>\r\n            text(`Db.${ArticleRow.localTextPrefix}.${s}`).toLowerCase();\r\n        return [\r\n            { name: \"\", title: \"all\" },\r\n            { name: fld.Title, title: txt(fld.Title)  },\r\n            { name: fld.AutherUsername, title:txt(fld.AutherUsername)},\r\n           // { name: fld.CreatedAt, title: txt(fld.CreatedAt) }, got a problem of casting\n           // { name: fld.UpdatedAt, title: txt(fld.UpdatedAt) }\r\n        ];\r\n    }\n\n    protected getColumns() {\n        const cols = super.getColumns();\n        const autherName = first(cols, x => x.field == ArticleRow.Fields.AutherUsername)\n        if (Authorization.hasPermission(PermissionKeys.Security))\n            autherName.visible = true;\n        return cols;\n    }    \n\n    /*protected getGridCanLoad() {\r\n        return this.AutherId != null || this._AutherId == 1;\r\n    }\r\n\r\n    private _AutherId: number;\r\n\r\n    get AutherId() {\r\n        return this._AutherId;\r\n    }\r\n\r\n    set AutherId(value: number) {\r\n        if (this._AutherId != value) {\r\n            this._AutherId = value;\r\n            this.setEquality(UserRow.Fields.UserId, value);\r\n            this.refresh();\r\n        }\r\n    }\n\n    */\n\n\n    protected getQuickFilters() {\r\n        let filters = super.getQuickFilters();\r\n        if (!Authorization.hasPermission(PermissionKeys.Security)) \r\n            filters.splice(indexOf(filters, x => x.field == ArticleRow.Fields.AutherUsername), 1);\r\n        \r\n        return filters;\r\n    }\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { ArticleForm, ArticleRow, ArticleService } from '@/ServerTypes/Articles';\r\nimport { first } from '@serenity-is/corelib/q';\r\n\r\n@Decorators.registerClass('Dashboard.Articles.ArticleDialog')\n@Decorators.panel()\nexport class ArticleDialog extends EntityDialog<ArticleRow, any> {\n    protected getFormKey() { return ArticleForm.formKey; }\n    protected getRowDefinition() { return ArticleRow; }\n    protected getService() { return ArticleService.baseUrl; }\n\n    protected form = new ArticleForm(this.idPrefix);\n\n    protected afterLoadEntity() {\r\n        super.afterLoadEntity();\r\n\r\n        this.form.CommentsGrid.ArticleId = this.entity.ArticleId;\n    }\n    protected getToolbarButtons() {\n        const buttons = super.getToolbarButtons();\n        //console.log(buttons);\n\n        const deleteButton = first(buttons, x => x.title == 'Delete');\n        if(deleteButton)\n            deleteButton.title = 'Delete Article';\n          \n        return buttons;\n\n    }\n\n}"],
  "mappings": "iNAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAAyD,SCAzD,IAAAC,EAAyC,SAEzC,IAAAC,EAAsB,SAIf,IAAMC,EAAN,cAA4B,cAA8B,CAA1D,kCAKH,KAAU,KAAO,IAAIC,EAAY,KAAK,QAAQ,EAJpC,YAAa,CAAE,OAAOA,EAAY,OAAS,CAC3C,kBAAmB,CAAE,OAAOC,CAAY,CACxC,YAAa,CAAE,OAAOC,EAAe,OAAS,CAI9C,iBAAkB,CACxB,MAAM,gBAAgB,EAEtB,KAAK,KAAK,aAAa,UAAY,KAAK,OAAO,SACnD,CACU,mBAAoB,CAC1B,IAAMC,EAAU,MAAM,kBAAkB,EAGlCC,KAAe,SAAMD,EAASE,GAAKA,EAAE,OAAS,QAAQ,EAC5D,OAAGD,IACCA,EAAa,MAAQ,kBAElBD,CAEX,CAEJ,EAxBaG,EAAAP,EAAA,iBAAAA,EAANQ,EAAA,CAFN,aAAW,cAAc,kCAAkC,EAC3D,aAAW,MAAM,GACLR,GDHb,IAAAS,EAAoD,SAI7C,IAAMC,EAAN,cAA0B,YAA4B,CAC/C,eAAgB,CAAE,OAAOC,EAAe,UAAY,CACpD,eAAgB,CAAE,OAAOC,CAAe,CACxC,kBAAmB,CAAE,OAAOC,CAAY,CACxC,YAAa,CAAE,OAAOC,EAAe,OAAS,CAExD,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CAKnB,CACU,sBAA2C,CACjD,IAAMC,EAAMH,EAAW,OACjBI,EAAMC,EAACC,MACT,QAAK,MAAMN,EAAW,mBAAmBM,GAAG,EAAE,YAAY,EADlD,OAEZ,MAAO,CACH,CAAE,KAAM,GAAI,MAAO,KAAM,EACzB,CAAE,KAAMH,EAAI,MAAO,MAAOC,EAAID,EAAI,KAAK,CAAG,EAC1C,CAAE,KAAMA,EAAI,eAAgB,MAAMC,EAAID,EAAI,cAAc,CAAC,CAG7D,CACJ,CAEU,YAAa,CACnB,IAAMI,EAAO,MAAM,WAAW,EACxBC,KAAa,SAAMD,EAAME,GAAKA,EAAE,OAAST,EAAW,OAAO,cAAc,EAC/E,OAAI,gBAAc,cAAcU,EAAe,QAAQ,IACnDF,EAAW,QAAU,IAClBD,CACX,CAuBU,iBAAkB,CACxB,IAAII,EAAU,MAAM,gBAAgB,EACpC,OAAK,gBAAc,cAAcD,EAAe,QAAQ,GACpDC,EAAQ,UAAO,WAAQA,EAASF,GAAKA,EAAE,OAAST,EAAW,OAAO,cAAc,EAAG,CAAC,EAEjFW,CACX,CACJ,EA9DaN,EAAAR,EAAA,eAAAA,EAANe,EAAA,CADN,aAAW,cAAc,gCAAgC,GAC7Cf,GDJE,SAARgB,GAA4B,IAC/B,0BAAuB,IAAIC,EAAY,EAAE,UAAU,CAAC,EAAE,OAAO,CACjE,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "ArticleDialog", "ArticleForm", "ArticleRow", "ArticleService", "buttons", "deleteButton", "x", "__name", "__decorateClass", "import_q", "ArticleGrid", "ArticleColumns", "ArticleDialog", "ArticleRow", "ArticleService", "container", "fld", "txt", "__name", "s", "cols", "autherName", "x", "PermissionKeys", "filters", "__decorateClass", "pageInit", "ArticleGrid", "__name"]
}
