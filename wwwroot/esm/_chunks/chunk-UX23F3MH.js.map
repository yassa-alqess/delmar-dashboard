{
  "version": 3,
  "sources": ["external-global:Serenity.Extensions", "../../../Modules/Articles/Comments/CommentsGrid.ts", "../../../Modules/ServerTypes/Articles/ArticleColumns.ts", "../../../Modules/ServerTypes/Articles/ArticleForm.ts", "../../../Modules/Articles/Category/CategoryDialog.ts", "../../../Modules/ServerTypes/Articles/ArticleRow.ts", "../../../Modules/ServerTypes/Articles/ArticleService.ts", "../../../Modules/ServerTypes/Articles/CategoryColumns.ts", "../../../Modules/ServerTypes/Articles/CategoryForm.ts", "../../../Modules/ServerTypes/Articles/CategoryRow.ts", "../../../Modules/ServerTypes/Articles/CategoryService.ts", "../../../Modules/ServerTypes/Articles/CommentsColumns.ts", "../../../Modules/ServerTypes/Articles/CommentsRow.ts", "../../../Modules/ServerTypes/Articles/CommentsService.ts", "../../../Modules/ServerTypes/Articles/PermissionKeys.ts"],
  "sourcesContent": ["module.exports = Serenity.Extensions;", "import { Decorators, EntityGrid, GridRowSelectionMixin } from '@serenity-is/corelib';\r\nimport { ArticleRow, CommentsColumns, CommentsRow, CommentsService, PermissionKeys } from '@/ServerTypes/Articles';\r\nimport { Authorization, notifyError } from '@serenity-is/corelib/q';\nimport { parseInteger } from \"@serenity-is/corelib/q\";\r\nimport { BulkServiceAction } from '@serenity-is/extensions';\r\n//import { CommentsDialog } from './CommentsDialog';\r\n\n@Decorators.registerEditor('Dashboard.Articles.CommentsGrid')\nexport class CommentsGrid extends EntityGrid<CommentsRow, any> {\n    protected getColumnsKey() { return CommentsColumns.columnsKey; }\n    //protected getDialogType() { return CommentsDialog; }\n    protected getRowDefinition() { return CommentsRow; }\n    protected getService() { return CommentsService.baseUrl; }\n    protected getLocalTextPrefix() { return CommentsRow.localTextPrefix; }\n    private rowSelection: GridRowSelectionMixin;\r\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected getButtons() {\n        let buttons = super.getButtons();\n        buttons.forEach(b => {\n            b.visible = false;\n        });\n\n        //add delete button\n        if (Authorization.hasPermission(PermissionKeys.Comments))\n        {\n        // I will be adding a bulk delete button here later.\n            buttons.push({\r\n                title: 'Delete Comments',\r\n                icon: 'fa fa-trash',\n                visible: true,\r\n                cssClass: 'delete-button',\r\n                 onClick: e => {\r\n                     //   debugger;\r\n                     let commentIds = this.rowSelection.getSelectedKeys();\n                     \r\n                     if (commentIds.length > 0) {\r\n                         var action = new DeleteBulkAction();\r\n                         action.done = () => this.rowSelection.resetCheckedAndRefresh();\r\n                         action.execute(commentIds);\r\n                     } else notifyError('Please Select Rows to submit');\r\n                 }\n            });\r\n        }\r\n        return buttons;\r\n    }\n    protected createToolbarExtensions() {\r\n        super.createToolbarExtensions();\r\n        if (Authorization.hasPermission(PermissionKeys.Comments))\r\n            this.rowSelection = new GridRowSelectionMixin(this);\r\n    }\n    protected getColumns() {\n        const columns = super.getColumns();\n        if (Authorization.hasPermission(PermissionKeys.Comments))\n            columns.splice(0, 0, GridRowSelectionMixin.createSelectColumn(() => this.rowSelection));\n        return columns;\n    }\n    \r\n\r\n    protected getInitialTitle() {\r\n        return null;\r\n    }\r\n\r\n    protected usePager() {\r\n        return true; //use pagination\r\n    }\r\n\r\n    protected getGridCanLoad() {\r\n        return this.ArticleId != null;\r\n    }\r\n\r\n    private _ArticleId: number;\r\n\r\n    get ArticleId() {\r\n        return this._ArticleId;\r\n    }\r\n\r\n    set ArticleId(value: number) {\r\n        if (this._ArticleId != value) {\r\n            this._ArticleId = value;\r\n            this.setEquality(ArticleRow.Fields.ArticleId, value);\r\n            this.refresh();\r\n        }\r\n    }\r\n}\n\n@Decorators.registerClass('Dashboard.Articles.DeleteBulkAction')\nexport class DeleteBulkAction extends BulkServiceAction {\r\n\r\n    /**\r\n     * This controls how many service requests will be used in parallel.\r\n     * Determine this number based on how many requests your server\r\n     * might be able to handle, and amount of wait on external resources.\r\n     */\r\n    protected getParallelRequests() {\n        return 10;\n    }\n\n    /**\r\n     * These number of records IDs will be sent to your service in one\r\n     * service call. If your service is designed to handle one record only,\r\n     * set it to 1. But note that, if you have 5000 records, this will\r\n     * result in 5000 service calls / requests.\r\n     */\n    protected getBatchSize() {\n        return 5;\n    }\n\n    protected sccss() {\n        alert('sccss');\n        debugger;\n    }\n    protected executeForBatch(batch) {\n\n        CommentsService.DeleteList(\n            {\n                CommentIds: batch.map(x => parseInteger(x))\r\n            },\r\n            response => {\r\n                this.set_successCount(this.get_successCount() + batch.length)\r\n            },\r\n            {\n                blockUI: false,\r\n                onError: response => this.set_errorCount(this.get_errorCount() + batch.length),\r\n                onCleanup: () => this.serviceCallCleanup(),\r\n            });\n\n    }\n}\n", "\uFEFFexport class ArticleColumns {\n    static columnsKey = 'Articles.Article';\n}", "\uFEFFimport { StringEditor, HtmlContentEditor, ImageUploadEditor, LookupEditor, BooleanEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { CategoryDialog } from \"@/Articles/Category/CategoryDialog\";\nimport { CommentsGrid } from \"@/Articles/Comments/CommentsGrid\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface ArticleForm {\n    Title: StringEditor;\n    HtmlContent: HtmlContentEditor;\n    Image: ImageUploadEditor;\n    AutherId: LookupEditor;\n    IsActive: BooleanEditor;\n    CategoryId: LookupEditor;\n    CreatedAt: DateEditor;\n    UpdatedAt: DateEditor;\n    CommentsGrid: CommentsGrid;\n}\n\nexport class ArticleForm extends PrefixedContext {\n    static formKey = 'Articles.Article';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ArticleForm.init)  {\n            ArticleForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = HtmlContentEditor;\n            var w2 = ImageUploadEditor;\n            var w3 = LookupEditor;\n            var w4 = BooleanEditor;\n            var w5 = DateEditor;\n            var w6 = CommentsGrid;\n\n            initFormType(ArticleForm, [\n                'Title', w0,\n                'HtmlContent', w1,\n                'Image', w2,\n                'AutherId', w3,\n                'IsActive', w4,\n                'CategoryId', w3,\n                'CreatedAt', w5,\n                'UpdatedAt', w5,\n                'CommentsGrid', w6\n            ]);\n        }\n    }\n}\n\n[CategoryDialog]; // referenced types", "\uFEFFimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { CategoryForm, CategoryRow, CategoryService } from '@/ServerTypes/Articles';\r\n\r\n@Decorators.registerClass('Dashboard.Articles.CategoryDialog')\nexport class CategoryDialog extends EntityDialog<CategoryRow, any> {\n    protected getFormKey() { return CategoryForm.formKey; }\n    protected getRowDefinition() { return CategoryRow; }\n    protected getService() { return CategoryService.baseUrl; }\n\n    protected form = new CategoryForm(this.idPrefix);\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface ArticleRow {\n    ArticleId?: number;\n    Title?: string;\n    HtmlContent?: string;\n    Image?: string;\n    IsActive?: boolean;\n    CategoryId?: number;\n    AutherId?: number;\n    CreatedAt?: string;\n    UpdatedAt?: string;\n    CategoryTitle?: string;\n    AutherUsername?: string;\n}\n\nexport abstract class ArticleRow {\n    static readonly idProperty = 'ArticleId';\n    static readonly nameProperty = 'Title';\n    static readonly localTextPrefix = 'Articles.Article';\n    static readonly deletePermission = 'Articles:Articles';\n    static readonly insertPermission = 'Articles:Articles';\n    static readonly readPermission = 'Articles:Articles';\n    static readonly updatePermission = 'Articles:Articles';\n\n    static readonly Fields = fieldsProxy<ArticleRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { ArticleRow } from \"./ArticleRow\";\n\nexport namespace ArticleService {\n    export const baseUrl = 'Articles/Article';\n\n    export declare function Create(request: SaveRequest<ArticleRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ArticleRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ArticleRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ArticleRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Articles/Article/Create\",\n        Update: \"Articles/Article/Update\",\n        Delete: \"Articles/Article/Delete\",\n        Retrieve: \"Articles/Article/Retrieve\",\n        List: \"Articles/Article/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ArticleService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class CategoryColumns {\n    static columnsKey = 'Articles.Category';\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CategoryForm {\n    Title: StringEditor;\n}\n\nexport class CategoryForm extends PrefixedContext {\n    static formKey = 'Articles.Category';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CategoryForm.init)  {\n            CategoryForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(CategoryForm, [\n                'Title', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CategoryRow {\n    CategoryId?: number;\n    Title?: string;\n}\n\nexport abstract class CategoryRow {\n    static readonly idProperty = 'CategoryId';\n    static readonly nameProperty = 'Title';\n    static readonly localTextPrefix = 'Articles.Category';\n    static readonly lookupKey = 'Articles.Category';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<CategoryRow>('Articles.Category') }\n    static async getLookupAsync() { return getLookupAsync<CategoryRow>('Articles.Category') }\n\n    static readonly deletePermission = 'Articles:Categories';\n    static readonly insertPermission = 'Articles:Categories';\n    static readonly readPermission = 'Articles:Categories';\n    static readonly updatePermission = 'Articles:Categories';\n\n    static readonly Fields = fieldsProxy<CategoryRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { CategoryRow } from \"./CategoryRow\";\n\nexport namespace CategoryService {\n    export const baseUrl = 'Articles/Category';\n\n    export declare function Create(request: SaveRequest<CategoryRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CategoryRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CategoryRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CategoryRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Articles/Category/Create\",\n        Update: \"Articles/Category/Update\",\n        Delete: \"Articles/Category/Delete\",\n        Retrieve: \"Articles/Category/Retrieve\",\n        List: \"Articles/Category/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CategoryService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class CommentsColumns {\n    static columnsKey = 'Articles.Comments';\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CommentsRow {\n    CommentId?: number;\n    Content?: string;\n    ContactId?: string;\n    ContactName?: string;\n    ArticleId?: number;\n    CreatedAt?: string;\n    ArticleTitle?: string;\n}\n\nexport abstract class CommentsRow {\n    static readonly idProperty = 'CommentId';\n    static readonly nameProperty = 'Content';\n    static readonly localTextPrefix = 'Articles.Comments';\n    static readonly deletePermission = 'Articles:Comments';\n    static readonly insertPermission = 'Articles:Comments';\n    static readonly readPermission = 'Articles:Comments';\n    static readonly updatePermission = 'Articles:Comments';\n\n    static readonly Fields = fieldsProxy<CommentsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { CommentsRow } from \"./CommentsRow\";\nimport { DeleteListRequest } from \"./Comments.DeleteListRequest\";\n\nexport namespace CommentsService {\n    export const baseUrl = 'Articles/Comments';\n\n    export declare function Create(request: SaveRequest<CommentsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CommentsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CommentsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CommentsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function DeleteList(request: DeleteListRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Articles/Comments/Create\",\n        Update: \"Articles/Comments/Update\",\n        Delete: \"Articles/Comments/Delete\",\n        Retrieve: \"Articles/Comments/Retrieve\",\n        List: \"Articles/Comments/List\",\n        DeleteList: \"Articles/Comments/DeleteList\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'DeleteList'\n    ].forEach(x => {\n        (<any>CommentsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport namespace PermissionKeys {\n    export const Security = \"Administration:Security\";\n    export const Articles = \"Articles:Articles\";\n    export const Comments = \"Articles:Comments\";\n    export const Categories = \"Articles:Categories\";\n}"],
  "mappings": "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",
  "names": ["require_Serenity", "__commonJSMin", "exports", "module", "import_corelib", "ArticleColumns", "__name", "import_corelib", "import_corelib", "CategoryDialog", "CategoryForm", "CategoryRow", "CategoryService", "__name", "__decorateClass", "import_q", "_ArticleForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "CommentsGrid", "ArticleForm", "__name", "import_q", "ArticleRow", "__name", "import_q", "ArticleService", "x", "r", "s", "o", "CategoryColumns", "__name", "import_corelib", "import_q", "_CategoryForm", "prefix", "w0", "CategoryForm", "__name", "import_q", "CategoryRow", "__async", "__name", "import_q", "CategoryService", "x", "r", "s", "o", "CommentsColumns", "__name", "import_q", "CommentsRow", "__name", "import_q", "CommentsService", "x", "r", "s", "o", "PermissionKeys", "import_q", "import_extensions", "CommentsGrid", "container", "CommentsColumns", "CommentsRow", "CommentsService", "buttons", "b", "PermissionKeys", "e", "commentIds", "action", "DeleteBulkAction", "columns", "value", "ArticleRow", "__name", "__decorateClass", "batch", "x", "response"]
}
